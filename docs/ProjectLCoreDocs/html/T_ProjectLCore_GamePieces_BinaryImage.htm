<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>BinaryImage Structure</title><meta name="Title" content="BinaryImage" /><meta name="Help.Id" content="T:ProjectLCore.GamePieces.BinaryImage" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="ProjectLCore.GamePieces" /><meta name="guid" content="T_ProjectLCore_GamePieces_BinaryImage" /><meta name="Description" content="Represents a 5x5 binary image. The image is stored as an integer, where each bit represents a cell in the image. The top left corner is viewed the least significant bit. We go down row by row from left to right. ##### 11111 ##.## 11011 ##.." /><meta name="tocFile" content="../toc/IDEA.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div class="level-item"><img src="../icons/Help.png" /></div><div id="DocumentationTitle" class="level-item">Project L Core Documentation</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div id="ContentContainer" class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="Resizer" class="is-hidden"></div><div id="TopicContent" class="column content is-7"><h1>Binary<wbr />Image Structure</h1><div class="summary">
            Represents a 5x5 binary image. The image is stored as an integer, where each bit represents a cell in the image.
            The top left corner is viewed the least significant bit. We go down row by row from left to right.
            
            <h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Example</h2><div id="IDBACSection"><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle"> </span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-plaintext">#####         11111
##.##         11011  
##..#  ----&gt;  11001  ----&gt;  0b10011_10001_10011_11011_11111
#...#         10001    
##..#         11001</code></pre></div></div></div></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Definition</h2><div id="IDBSection"><strong>Namespace:</strong> <a href="N_ProjectLCore_GamePieces.htm">ProjectLCore.GamePieces</a><br /><strong>Assembly:</strong> ProjectLCore (in ProjectLCore.dll) Version: 1.0.0+68dc6843b982df0ec3e9e67171fb5dc5f15970d3<div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">struct</span> <span class="identifier">BinaryImage</span> : <span class="identifier">IEquatable</span>&lt;<span class="identifier">BinaryImage</span>&gt;</code></pre></div></div><dl class="inheritanceHierarchy"><dt>Inheritance</dt><dd><a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <a href="https://learn.microsoft.com/dotnet/api/system.valuetype" target="_blank" rel="noopener noreferrer">ValueType</a>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <span class="selflink">BinaryImage</span></dd></dl><dl class="implementsList"><dt>Implements</dt><dd><a href="https://learn.microsoft.com/dotnet/api/system.iequatable-1" target="_blank" rel="noopener noreferrer">IEquatable</a><span id="LST93024830_0" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><span class="selflink">BinaryImage</span><span id="LST93024830_1" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span></dd></dl></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Constructors</h2><div id="IDAFASection"><table id="ConstructorList" class="table is-hoverable"><tr><td><a href="M_ProjectLCore_GamePieces_BinaryImage__ctor.htm">BinaryImage</a></td><td>
            Initializes a new instance of the <span class="selflink">BinaryImage</span> struct.
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Properties</h2><div id="IDUFASection"><table id="PropertyList" class="table is-hoverable"><tr><td><a href="P_ProjectLCore_GamePieces_BinaryImage_EmptyImage.htm">EmptyImage</a></td><td> The image which has all cells empty. </td></tr><tr><td><a href="P_ProjectLCore_GamePieces_BinaryImage_FullImage.htm">FullImage</a></td><td> The image which has all cells filled in. </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Methods</h2><div id="IDBFASection"><table id="MethodList" class="table is-hoverable"><tr><td><a href="M_ProjectLCore_GamePieces_BinaryImage_CountEmptyCells.htm">CountEmptyCells</a></td><td>
            Counts the empty cells.
            </td></tr><tr><td><a href="M_ProjectLCore_GamePieces_BinaryImage_CountFilledCells.htm">CountFilledCells</a></td><td>
            Counts the filled cells.
            </td></tr><tr><td><a href="M_ProjectLCore_GamePieces_BinaryImage_Equals.htm">Equals(BinaryImage)</a></td><td>
            Indicates whether the current <span class="selflink">BinaryImage</span> is equal to another <span class="selflink">BinaryImage</span>.
            Two images are equal if all of their cells are the same.
            </td></tr><tr><td><a href="M_ProjectLCore_GamePieces_BinaryImage_Equals_1.htm">Equals(Object)</a></td><td>
            Determines whether the specified object is equal to the current <span class="selflink">BinaryImage</span>.
            <br />(Overrides <a href="https://learn.microsoft.com/dotnet/api/system.valuetype.equals" target="_blank" rel="noopener noreferrer">ValueType<span id="LST93024830_2" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>Equals(Object)</a>)</td></tr><tr><td><a href="M_ProjectLCore_GamePieces_BinaryImage_FlipHorizontally.htm">FlipHorizontally</a></td><td>
            Flips the image horizontally.
            </td></tr><tr><td><a href="M_ProjectLCore_GamePieces_BinaryImage_FlipVertically.htm">FlipVertically</a></td><td>
            Flips the image vertically.
            </td></tr><tr><td><a href="M_ProjectLCore_GamePieces_BinaryImage_GetHashCode.htm">GetHashCode</a></td><td>
            Returns a hash code for this instance.
            <br />(Overrides <a href="https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode" target="_blank" rel="noopener noreferrer">ValueType<span id="LST93024830_3" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>GetHashCode<span id="LST93024830_4" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a>)</td></tr><tr><td><a href="M_ProjectLCore_GamePieces_BinaryImage_MoveDown.htm">MoveDown</a></td><td>
            Attempts to move the cells of the image down by one cell. If there is a filled cell in the bottom row, no transformation is done.
            </td></tr><tr><td><a href="M_ProjectLCore_GamePieces_BinaryImage_MoveImageToTopLeftCorner.htm">MoveImageToTopLeftCorner</a></td><td>
            Moves the filled in cells to the top left corner of the image.
            </td></tr><tr><td><a href="M_ProjectLCore_GamePieces_BinaryImage_MoveLeft.htm">MoveLeft</a></td><td>
            Attempts to move the cells of the image left by one cell. If there is a filled cell in the left column, no transformation is done.
            </td></tr><tr><td><a href="M_ProjectLCore_GamePieces_BinaryImage_MoveRight.htm">MoveRight</a></td><td>
            Attempts to move the cells of the image right by one cell. If there is a filled cell in the right column, no transformation is done.
            </td></tr><tr><td><a href="M_ProjectLCore_GamePieces_BinaryImage_MoveUp.htm">MoveUp</a></td><td>
            Attempts to move the cells of the image up by one cell. If there is a filled cell in the top row, no transformation is done.
            </td></tr><tr><td><a href="M_ProjectLCore_GamePieces_BinaryImage_RotateLeft.htm">RotateLeft</a></td><td>
            Rotates the image 90 degrees to the left.
            </td></tr><tr><td><a href="M_ProjectLCore_GamePieces_BinaryImage_RotateRight.htm">RotateRight</a></td><td>
            Rotates the image 90 degrees to the right.
            </td></tr><tr><td><a href="M_ProjectLCore_GamePieces_BinaryImage_ToString.htm">ToString</a></td><td>
            Converts to string. '#' represents filled cell, '.' represents empty cell.
            <br />(Overrides <a href="https://learn.microsoft.com/dotnet/api/system.valuetype.tostring" target="_blank" rel="noopener noreferrer">ValueType<span id="LST93024830_5" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>ToString<span id="LST93024830_6" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a>)</td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Operators</h2><div id="IDMFASection"><table id="OperatorList" class="table is-hoverable"><tr><td><a href="M_ProjectLCore_GamePieces_BinaryImage_op_BitwiseAnd.htm">BitwiseAnd(BinaryImage, BinaryImage)</a></td><td>
            Implements the operator &amp;. The intersection of two images is the image where a cell is filled in if and only if both images have the cell filled in.
            </td></tr><tr><td><a href="M_ProjectLCore_GamePieces_BinaryImage_op_BitwiseOr.htm">BitwiseOr(BinaryImage, BinaryImage)</a></td><td>
            Implements the operator |. The union of two images is the image where a cell is filled in if and only if at least one of the images have the cell filled in.
            </td></tr><tr><td><a href="M_ProjectLCore_GamePieces_BinaryImage_op_Equality.htm">Equality(BinaryImage, BinaryImage)</a></td><td>
            Implements the operator ==.
            </td></tr><tr><td><a href="M_ProjectLCore_GamePieces_BinaryImage_op_Inequality.htm">Inequality(BinaryImage, BinaryImage)</a></td><td>
            Implements the operator !=.
            </td></tr><tr><td><a href="M_ProjectLCore_GamePieces_BinaryImage_op_OnesComplement.htm">OnesComplement(BinaryImage)</a></td><td>
            Implements the operator ~. The complement of an image is the image where a cell is filled in if and only if the original image has the cell empty.
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="N_ProjectLCore_GamePieces.htm">ProjectLCore.GamePieces Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Example</a></li><li><a class="quickLink">Definition</a></li><li><a class="quickLink">Constructors</a></li><li><a class="quickLink">Properties</a></li><li><a class="quickLink">Methods</a></li><li><a class="quickLink">Operators</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>